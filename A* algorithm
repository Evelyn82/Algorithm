#include <iostream>
#include <vector>
#include <queue>
#include <map>
#define INF 987654321
using namespace std;

typedef pair<int, long long> il;

struct info {
	int f, g, h;
	long long p;
	int board[4][4];
};

int loc[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

long long HASH(int board[4][4]) {
	static int A1 = 1000033, B1 = 1000000007;
	static int A2 = 999961, B2 = 999999937;
	long long ret1 = 0, ret2 = 0;
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			ret1 *= A1;
			ret1 += board[i][j];
			ret1 %= B1;
			ret2 *= A2;
			ret2 += board[i][j];
			ret2 %= B2;
		}
	}
	return (ret1 << 32) | ret2;
}

int h(int board[4][4]) {
	int ret = 0;
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			if (board[i][j]) {
				int t = board[i][j] - 1;
				int ii = t / 4;
				int jj = t % 4;
				int dist = abs(ii - i) + abs(jj - j);
				ret += dist * dist;
			}
		}
	}
	return ret;
}

/* Goal: To make board
  1  2  3  4
  5  6  7  8
  9 10 11 12
 13 14 15  0
*/
int main() {
	int tc;
	cin >> tc;
	while (tc--) {
		priority_queue<il, vector<il>, greater<il>> open;
		map<long long, info> mapping;

		info input;
		for (int i = 0; i < 4; ++i) {
			for (int j = 0; j < 4; ++j) {
				cin >> input.board[i][j];
			}
		}

		input.g = 0;
		input.h = h(input.board);
		input.f = input.g + input.h;
		input.p = -1;

		long long hvalue = HASH(input.board);
		mapping[hvalue] = input;
		open.push({input.f, hvalue});

		while (!open.empty()) {
			il todo = open.top(); open.pop();
			int f = todo.first;

			info now = mapping[todo.second];

			if (now.f < f) continue;
			
			now.g++;
			now.p = todo.second;

			int x, y;
			for (int i = 0; i < 4; ++i) {
				for (int j = 0; j < 4; ++j) {
					if (now.board[i][j] == 0) {
						x = i; y = j;
						goto brk;
					}
				}
			}
			brk:;
			for (int i = 0; i < 4; ++i) {
				int xx, yy;
				xx = x + loc[i][0];
				yy = y + loc[i][1];
				if (xx < 0 || xx >= 4 || yy < 0 || yy >= 4) continue;

				now.board[x][y] = now.board[xx][yy];
				now.board[xx][yy] = 0;
				now.h = h(now.board);
				now.f = now.g + now.h;

				hvalue = HASH(now.board);

				if (mapping.find(hvalue) == mapping.end() || mapping[hvalue].f > now.f) {
					mapping[hvalue] = now;
					open.push({now.f, hvalue});
				}

				if (now.h == 0) {
					vector<long long> ans;
					ans.push_back(hvalue);
					do {
						ans.push_back(now.p);
						now = mapping[now.p];
					} while (now.p != -1);
					
					// 움직여야 할 block을 순서대로 출력
					cout << ans.size() - 1 << '\n';
					for (int k = ans.size() - 2; k >= 0; --k) {
						long long u = ans[k];
						long long v = ans[k + 1];
						for (int i = 0; i < 4; ++i) {
							for (int j = 0; j < 4; ++j) {
								if (mapping[u].board[i][j] != mapping[v].board[i][j]) {
									cout << mapping[u].board[i][j] + mapping[v].board[i][j] << ' ';									
									goto brk2;
								}
							}
						}
						brk2:;
					}
					cout << '\n';
					goto clear;
				}
				now.board[xx][yy] = now.board[x][y];
				now.board[x][y] = 0;
			}
		}
		clear:;
	}
}
